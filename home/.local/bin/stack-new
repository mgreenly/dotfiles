#!/bin/bash

# 
# TODO: figure out how to turn this into a stack template
#

if [ "$#" -ne 2 ]; then
  echo "usage: stack-new [app|lib] NAME"
  echo ""
  echo "  NAME - a lower case hyphenated package name"
  echo ""
  exit 1
fi

# the package name is hyphenated lower case
PACKAGE_TYPE=${1,,}

# the package name is hyphenated lower case
PACKAGE_NAME=${2,,}


# The module name is upper camel cased.  This mess
# splits the package name on hyphens, then appends
# each capitalized word into the module name.
MODULE_NAME=();
IFS='-' read -ra WORDS <<< "$PACKAGE_NAME"
for i in "${WORDS[@]}"; do
    MODULE_NAME=(${MODULE_NAME[@]}${i^})
done
MODULE_NAME="${MODULE_NAME[@]}"

# determine the users name and email from git config
USER_NAME=$(git config user.name)
USER_EMAIL=$(git config user.email)

#
# initialize the project directory
#
if [[ -e $PACKAGE_NAME ]]; then
  echo "ERROR, $PACKAGE_NAME already exists"
  exit 1
fi
mkdir $PACKAGE_NAME
cd $PACKAGE_NAME

mkdir "src" "test"


case $PACKAGE_TYPE in
  lib)
#
# create the cabal file
#
cat << EOF > $PACKAGE_NAME.cabal
name:                  $PACKAGE_NAME
version:               0.0.1
synopsis:              Auto generated synopsis for $PACKAGE_NAME package
homepage:              https://github.com/$USER
license:               ISC
license-file:          LICENSE
author:                ${USER_NAME}
maintainer:            ${USER_EMAIL}
build-type:            Simple
cabal-version:         >=1.10

source-repository head
  type:               git
  location:           https://github.com/$USER/$PACKAGE_NAME

library
  default-language:    Haskell2010
  hs-source-dirs:      src
  exposed-modules:     $MODULE_NAME
  ghc-options:         -O2
                       -threaded
                       -with-rtsopts=-N
  build-depends:       base                    >= 4.8

test-suite $PACKAGE_NAME-test
  type:                exitcode-stdio-1.0
  default-language:    Haskell2010
  hs-source-dirs:      test
                       , src
  main-is:             Test.hs
  build-depends:       base
                       , hspec
                       , QuickCheck
EOF
;;
  app)
#
# create the cabal file
#
cat << EOF > $PACKAGE_NAME.cabal
name:                  $PACKAGE_NAME
version:               0.0.1
synopsis:              Auto generated synopsis for $PACKAGE_NAME package
homepage:              https://github.com/$USER
license:               ISC
license-file:          LICENSE
author:                ${USER_NAME}
maintainer:            ${USER_EMAIL}
build-type:            Simple
cabal-version:         >=1.10

source-repository head
  type:               git
  location:           https://github.com/$USER/$PACKAGE_NAME

executable             $PACKAGE_NAME
  default-language:    Haskell2010
  hs-source-dirs:      src
  main-is:             Main.hs
  other-modules:       Foo
  ghc-options:         -O2
                       -threaded
                       -with-rtsopts=-N
  build-depends:       base                    >= 4.8

test-suite $PACKAGE_NAME-test
  type:                exitcode-stdio-1.0
  default-language:    Haskell2010
  hs-source-dirs:      test
                       , src
  main-is:             Test.hs
  build-depends:       base
                       , hspec
                       , QuickCheck
EOF
;;
*)
  echo "unknown package type"
  exit
esac


#
# create a license file
#
cat << EOF > LICENSE 
Copyright (c) $(date +"%Y") ${USER_NAME}

Permission to use, copy, modify, and/or distribute this software for any purpose
with or without fee is hereby granted, provided that the above copyright notice
and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
THIS SOFTWARE.
EOF



#
# create a project specific .vimrc file
#
cat << EOF > .vimrc
"" build project with profiling
map <leader>p :exe '!clear && stack build --executable-profiling --library-profiling --ghc-options="-rtsopts"'<CR>
map <leader>P :exe '!clear && stack exec $PACKAGE_NAME -- +RTS -sstderr'<CR>
"" build for threadscope with eventlog
map <leader>e :exe '!clear && stack build --ghc-options="-eventlog -rtsopts"'<CR>
map <leader>E :exe '!clear && stack exec $PACKAGE_NAME -- +RTS -N2 -l'<CR>
"" build - build project
map <leader>b :exe '!clear && stack build'<CR>
"" clean - clean build artifacts
map <leader>c :exe '!clear && stack clean'<CR>
"" interactive - load modules in repl
map <leader>i :exe '!clear && stack ghci'<CR>
"" run - run program
map <leader>r :exe '!clear && stack build && clear && stack exec $PACKAGE_NAME'<CR>
"" spec - run specs
map <leader>s :exe '!clear && stack test'<CR>
"" spec - run specs


" HASKTAGS
"   - jump to tag
noremap <leader>t "zyiw:exe 'tag '.@z<CR>
"   - generate tags
noremap <leader>T :exe '!clear && hasktags --ctags ./src ./app'<CR>
"   - return from tag
noremap <leader>z :exe 'pop'<CR>


"
" HDEVTOOLS
"   - show type under cursor
noremap <F5> :HdevtoolsType<CR>
"   - clear type info


" HOOGLE
"   - search hoogle 
noremap <F6> :Hoogle<CR>
"   - clear search 
noremap <S-F6> :HoogleClose<CR>


"
" HLINT
"   - lint current file
map <F7> "zyiw:exe '!clear && stack exec hlint -- -c=auto -s '.@%<CR>
EOF


#
#
# create the setup file
#
cat << EOF > Setup.hs
import Distribution.Simple
main = defaultMain
EOF


#
#
# create a gitignore file
#
cat << EOF > .gitignore
/*.deb
/*.hp
/*.prof
/.*.sw?
/.DS_Store
/.cabal-sandbox
/.stack-work
/client_session_key.aes
/dist
/pkg-debian
/tags
/TAGS
EOF

#
# create sample source files
#
case $PACKAGE_TYPE in
  lib)
cat << EOF > src/$MODULE_NAME.hs
module $MODULE_NAME
    ( foo
    ) where

foo :: String
foo = "foo"
EOF
    ;;
  app)
cat << EOF > src/Foo.hs
module Foo
    ( foo
    ) where

foo :: String
foo = "foo"
EOF
    ;;
  *)
    echo "error, uknown package type"
    exit 1
esac

#
# create application
#
if [[ $PACKAGE_TYPE == 'app' ]]; then
cat << EOF > src/Main.hs
module Main where

import Foo (foo)

main :: IO ()
main = putStrLn foo
EOF
fi

if [[ $PACKAGE_TYPE == 'app' ]]; then
TEST_MODULE_NAME="Foo"
else
TEST_MODULE_NAME=$MODULE_NAME
fi

#
# create application
#
cat << EOF > test/Test.hs
import Test.Hspec
import Test.QuickCheck
import Control.Exception (evaluate)

import $TEST_MODULE_NAME

main :: IO ()
main = hspec $ do
    describe "testing stuff" $ do

        it "foo returns the expected value" $ do
            foo \`shouldBe\` ("foo" :: String)
EOF

stack init
