#!/bin/bash

#
# This script tries to create a Dockerfile
#

if [[ -e ./Dockerfile ]];then 
  echo "Dockerfile already exists.  Cowardly refusing to run."
  exit
fi

if [[ ! -e ./stack.yaml ]];then 
  echo "Missing stack.yaml file.  Cowardly refusing to run."
  exit
fi

#
# the package name defaults to the current directory if one is not provided
#
IMAGE_NAME=${1:-$(basename $PWD)}

#
# stack build puts the binary here
#
STACK_BINDIR=$(stack path | grep "local-install-root" | cut -f2 -d' ')/bin

#
# stack only allows paths relative to the current directory
#
REL_STACK_BINDIR=${STACK_BINDIR#$PWD/}

#
# try to find the name of the executable as it's defined in the cabal file
# this pretty much assumes there's only one executable defined
#
CABAL_FILE=`find . -iname *.cabal -printf "%f"`
EXE_NAME=`grep -e '^executable' $CABAL_FILE | cut -d' ' -f2`

#
# the template for the Dockerfile.  Be sure to include any
# specific library dependencies you're application requires
#
cat << EOF > Dockerfile
FROM debian:latest

RUN DEBIAN_FRONTEND=noninteractive \\
    && apt-get -q -y update \\
    && apt-get \\
        -o Dpkg::Options::="--force-confdef" \\
        -o Dpkg::Options::="--force-confold" \\
        -q -y install \\
        libgmp10

ADD $REL_STACK_BINDIR /usr/local/bin

CMD $EXE_NAME
EOF


#
# generate a build script
#
cat << EOF > build.sh
#!/bin/bash

#
# this script automates the docker build process
#
IMAGE_NAME=$USER/$IMAGE_NAME

#
# make sure the base is current
#
docker pull debian:latest

#
# rebuild the application
#
stack build --force-dirty

#
# get the tag and id of the current image/tag
#
oldtag=\$(docker images --format="{{.ID}}:{{.Tag}}" \$IMAGE_NAME | grep -v latest | cut -f2 -d:)
oldid=\$(docker images --format="{{.ID}}:{{.Tag}}" \$IMAGE_NAME | grep latest | cut -f1 -d:)

#
# generate the tag for the new image and build it also tag it latest
#
newtag=\$(date +"%Y%m%d%H%M%S")
docker build -t \$IMAGE_NAME:\$newtag .
docker tag \$IMAGE_NAME:"\$newtag" \$IMAGE_NAME:latest

if [[ -n "\$oldtag" ]]; then
  docker rmi \$IMAGE_NAME:\$oldtag
fi

#
# upload the new latest
#
#docker push $IMAGE_NAME:latest
EOF
chmod +x build.sh


#
# output message
#
echo
echo "Dockerfile - successfully created"
echo 
echo "  to build use something like: \"docker build -t $USER/$IMAGE_NAME .\""
echo
